import asyncio
import telebot
import subprocess
from telebot.async_telebot import AsyncTeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from config import TOKEN
from db1 import DataBase

db = DataBase('test.db')

bot = AsyncTeleBot(TOKEN)

@bot.message_handler(commands=['start'])
async def start(message: telebot.types.Message):
    if not db.true_user_id(message.from_user.id):
        db.register_users_id(message.from_user.id)
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –Ø MV AI. –ü–∏—à—É —Ç–µ–∫—Å—Ç—ã –ø–µ—Å–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å,\n–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º.')

@bot.message_handler(commands=["help"])
async def start_help(message: telebot.types.Message):
    main_buttons = InlineKeyboardMarkup()
    how_generate_music = InlineKeyboardButton('1 –≤–æ–ø—Ä–æ—Å', callback_data='var1')
    how_generate_music1 = InlineKeyboardButton('2 –≤–æ–ø—Ä–æ—Å', callback_data='var2')
    how_generate_music2 = InlineKeyboardButton('3 –≤–æ–ø—Ä–æ—Å', callback_data='var3')
    how_generate_music3 = InlineKeyboardButton('4 –≤–æ–ø—Ä–æ—Å', callback_data='var4')
    main_buttons.add(how_generate_music, how_generate_music1, how_generate_music2, how_generate_music3)
    await bot.send_message(message.from_user.id, "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n–ö–∞–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Å–Ω—é?\n–ö–∞–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å?\n–ì–æ–ª–æ—Å –±—É–¥–µ—Ç –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–º?\n–ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å?", reply_markup=main_buttons)

@bot.message_handler(commands=["setting"])
async def start_setting(message: telebot.types.Message):
    markup = InlineKeyboardMarkup()
    btn_main = InlineKeyboardButton("–Ø–∑—ã–∫", callback_data='lenguage')
    btn_main1 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", callback_data='popolnenie') 

    markup.add(btn_main, btn_main1)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=markup)
    
'''@bot.message_handler()
async def start_mess(message: telebot.types.Message):
    if db.isDownload(message.from_user.id) == True:
        await bot.send_message(message.from_user.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å –∏ –º—ã –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.") 
    elif db.isDownload == False:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!") '''

@bot.message_handler()
async def start_mess(message: telebot.types.Message):
    if db.check_balance(db.get_balance(message.from_user.id), len(message.text), message.from_user.id):  
        db.or_balance(message.from_user.id, len(message.text), '-')
        print('test1') 
        '''args_list = [
                        'python3',
                        'api.py',
                        str(message.text),
                        f'MALE',
                        str(message.from_user.id), 
                        str(message.from_user.id), 
                    ]
        subprocess.Popen(args_list)'''
    else: 
        markup = InlineKeyboardMarkup()
        btn_main1= InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", callback_data='popolnenie')
        markup.add(btn_main1)
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
async def start_callback(call):
    if call.data == 'var1':
        await bot.send_message(call.from_user.id, '–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ —á–µ–º –±—É–¥–µ—Ç –ø–µ—Å–Ω—è, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.')
    if call.data == 'var2':
        print('hello')
        await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–æ–ª–æ—Å–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏.')
    if call.data == 'var3':
        print('hello')
        await bot.send_message(call.from_user.id, '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–≤—É–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–æ–ª–æ—Å–∞. –Ø —Å—Ç–∞—Ä–∞—é—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –∑–≤—É—á–∞—â—â–∏–π –≥–æ–ª–æ—Å,–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º.')
    if call.data == 'var4':
        print('hello')
        await bot.send_message(call.from_user.id, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞–∑–±—Ä–∞–±–æ—Ç–∫–µ.')

    if call.data == 'popolnenie':
        db.or_balance(call.from_user.id, 1000, '+')
        await bot.send_message(call.from_user.id,  f'–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {db.get_balance(call.from_user.id)}')

    if call.data == 'lenguage':
        markup = InlineKeyboardMarkup()
        rus_btn = InlineKeyboardButton('RU üá∑üá∫', callback_data='rus')
        eng_btn = InlineKeyboardButton('ENG üá¨üáß', callback_data='eng')
        fr_btn = InlineKeyboardButton('FR üá´üá∑', callback_data='fr')
        de_btn = InlineKeyboardButton('DE üá©üá™', callback_data='de')

        markup.add(rus_btn, eng_btn, fr_btn, de_btn)
        await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', reply_markup=markup)

    if call.data == 'rus':
        await bot.send_message(call.from_user.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π', reply_markup=markup) 
        #–Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        db.set_language('rus', call.from_user.id)

    if call.data == 'eng':
        await bot.send_message(call.from_user.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π', reply_markup=markup)
        db.set_language('eng', call.from_user.id)
        
    if call.data == 'fr':
        await bot.send_message(call.from_user.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', reply_markup=markup)
        db.set_language('fr', call.from_user.id)

    if call.data == 'de':
        await bot.send_message(call.from_user.id, '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π', reply_markup=markup)
        db.set_language('de', call.from_user.id)

async def main():
    await bot.infinity_polling()

if __name__ == "__main__":
    asyncio.run(main())